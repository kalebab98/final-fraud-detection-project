name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        # Install additional linting tools
        pip install black flake8 isort
        
        # Run black (code formatting)
        black --check --diff scripts/ tests/ dashboard/
        
        # Run isort (import sorting)
        isort --check-only --diff scripts/ tests/ dashboard/
        
        # Run flake8 (code quality)
        flake8 scripts/ tests/ dashboard/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run tests
      run: |
        # Create test data directory if it doesn't exist
        mkdir -p data
        
        # Create minimal test data files
        python -c "
import pandas as pd
import numpy as np

# Create minimal fraud data
fraud_data = pd.DataFrame({
    'user_id': [1, 2, 3, 4, 5],
    'signup_time': ['2023-01-01 10:00:00', '2023-01-01 11:00:00', '2023-01-01 12:00:00', '2023-01-01 13:00:00', '2023-01-01 14:00:00'],
    'purchase_time': ['2023-01-01 10:30:00', '2023-01-01 11:30:00', '2023-01-01 12:30:00', '2023-01-01 13:30:00', '2023-01-01 14:30:00'],
    'purchase_value': [100, 200, 300, 400, 500],
    'device_id': ['dev1', 'dev2', 'dev3', 'dev4', 'dev5'],
    'source': ['Ads', 'Direct', 'SEO', 'Ads', 'Direct'],
    'browser': ['Chrome', 'Firefox', 'Safari', 'Chrome', 'Firefox'],
    'sex': ['M', 'F', 'M', 'F', 'M'],
    'age': [25, 30, 35, 40, 45],
    'ip_address': ['192.168.1.1', '192.168.1.2', '192.168.1.3', '192.168.1.4', '192.168.1.5'],
    'class': [0, 1, 0, 1, 0]
})
fraud_data.to_csv('data/Fraud_Data.csv', index=False)

# Create minimal IP data
ip_data = pd.DataFrame({
    'lower_bound_ip_address': [3232235777, 3232235778, 3232235779, 3232235780, 3232235781],
    'upper_bound_ip_address': [3232235777, 3232235778, 3232235779, 3232235780, 3232235781],
    'country': ['United States', 'Canada', 'United Kingdom', 'Germany', 'France']
})
ip_data.to_csv('data/IpAddress_to_Country.csv', index=False)

# Create minimal credit data
credit_data = pd.DataFrame({
    'Time': [1, 2, 3, 4, 5],
    'V1': [0.1, 0.2, 0.3, 0.4, 0.5],
    'V2': [0.1, 0.2, 0.3, 0.4, 0.5],
    'Amount': [100, 200, 300, 400, 500],
    'Class': [0, 1, 0, 1, 0]
})
credit_data.to_csv('data/creditcard.csv', index=False)
        "
        
        # Run tests with coverage
        pytest tests/ --cov=scripts --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create models directory
      run: mkdir -p models
    
    - name: Train models
      run: |
        python -c "
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath('.')))

from scripts.data_cleaning import prepare_data_for_modeling
from scripts.model_evaluation import train_multiple_models

# Prepare data
X_train, y_train, X_test, y_test, feature_names = prepare_data_for_modeling(
    'data/Fraud_Data.csv',
    'data/IpAddress_to_Country.csv',
    'data/creditcard.csv'
)

# Train models
models, results = train_multiple_models(X_train, y_train, X_test, y_test, ['logistic_regression', 'random_forest'])
print('Models trained successfully!')
        "
    
    - name: Test dashboard
      run: |
        # Test that dashboard can be imported
        python -c "
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath('.')))

# Test dashboard import
try:
    from dashboard.app import main
    print('Dashboard imports successfully!')
except Exception as e:
    print(f'Dashboard import failed: {e}')
            exit(1)
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security checks
      run: |
        # Run bandit (security linting)
        bandit -r scripts/ dashboard/ -f json -o bandit-report.json || true
        
        # Run safety (dependency vulnerability check)
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
